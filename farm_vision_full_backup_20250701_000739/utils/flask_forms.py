from flask_wtf import FlaskForm
from flask_wtf.file import FileField, FileAllowed, FileRequired
from wtforms import StringField, TextAreaField, SelectField, FloatField, IntegerField, BooleanField, SubmitField
from wtforms.validators import DataRequired, Length, NumberRange, Optional
from wtforms.widgets import TextArea

class ProjectForm(FlaskForm):
    """
    Flask adaptation of Django Projects_Form
    """
    title = StringField('Proje Ba≈ülƒ±ƒüƒ±', 
                       validators=[DataRequired(), Length(min=2, max=200)])
    
    description = TextAreaField('A√ßƒ±klama', 
                               validators=[Optional(), Length(max=1000)],
                               widget=TextArea())
    
    farm_name = StringField('√áiftlik Adƒ±', 
                           validators=[Optional(), Length(max=100)])
    
    field_name = StringField('Tarla Adƒ±', 
                            validators=[Optional(), Length(max=100)])
    
    location = StringField('Konum', 
                          validators=[Optional(), Length(max=200)])
    
    submit = SubmitField('Proje Olu≈ütur')

class FruitDetectionForm(FlaskForm):
    """
    Advanced fruit detection form
    """
    image = FileField('Meyve G√∂r√ºnt√ºs√º', 
                     validators=[FileRequired(), 
                               FileAllowed(['jpg', 'jpeg', 'png'], 'Sadece JPG, JPEG ve PNG dosyalarƒ±!')])
    
    fruit_type = SelectField('Meyve T√ºr√º',
                            choices=[
                                ('elma', 'üçé Elma'),
                                ('armut', 'üçê Armut'),
                                ('portakal', 'üçä Portakal'),
                                ('mandalina', 'üçä Mandalina'),
                                ('seftali', 'üçë ≈ûeftali'),
                                ('nar', 'üçÖ Nar'),
                                ('limon', 'üçã Limon'),
                                ('mixed', 'üçá Karƒ±≈üƒ±k')
                            ],
                            default='mixed')
    
    confidence = FloatField('G√ºven E≈üiƒüi (%)',
                           validators=[NumberRange(min=10, max=95)],
                           default=25)
    
    project_id = SelectField('Proje (Opsiyonel)',
                            choices=[],
                            validators=[Optional()],
                            coerce=int)
    
    submit = SubmitField('Tespit Ba≈ülat')

class MultiDetectionForm(FlaskForm):
    """
    Advanced multi-fruit detection form
    """
    image = FileField('√áoklu Meyve G√∂r√ºnt√ºs√º',
                     validators=[FileRequired(),
                               FileAllowed(['jpg', 'jpeg', 'png'], 'Sadece JPG, JPEG ve PNG dosyalarƒ±!')])
    
    detection_mode = SelectField('Tespit Modu',
                                choices=[
                                    ('all', 'T√ºm Meyveler'),
                                    ('citrus', 'Narenciye Grubu'),
                                    ('tree_fruits', 'Aƒüa√ß Meyveleri'),
                                    ('custom', '√ñzel Se√ßim')
                                ],
                                default='all')
    
    confidence = FloatField('G√ºven E≈üiƒüi (%)',
                           validators=[NumberRange(min=10, max=95)],
                           default=25)
    
    iou_threshold = FloatField('IoU E≈üiƒüi',
                              validators=[NumberRange(min=0.3, max=0.9)],
                              default=0.7)
    
    model_version = SelectField('Model Versiyonu',
                               choices=[
                                   ('yolov7', 'YOLO v7 (Varsayƒ±lan)'),
                                   ('yolov7x', 'YOLO v7x (Y√ºksek Doƒüruluk)'),
                                   ('yolov7-tiny', 'YOLO v7-Tiny (Hƒ±zlƒ±)')
                               ],
                               default='yolov7')
    
    project_id = SelectField('Proje (Opsiyonel)',
                            choices=[],
                            validators=[Optional()],
                            coerce=int)
    
    submit = SubmitField('√áoklu Tespit Ba≈ülat')

class LeafDiseaseForm(FlaskForm):
    """
    Leaf disease detection form
    """
    image = FileField('Yaprak G√∂r√ºnt√ºs√º',
                     validators=[FileRequired(),
                               FileAllowed(['jpg', 'jpeg', 'png'], 'Sadece JPG, JPEG ve PNG dosyalarƒ±!')])
    
    crop_type = SelectField('√úr√ºn T√ºr√º',
                           choices=[
                               ('corn', 'üåΩ Mƒ±sƒ±r'),
                               ('wheat', 'üåæ Buƒüday'),
                               ('potato', 'ü•î Patates'),
                               ('tomato', 'üçÖ Domates'),
                               ('general', 'üå± Genel')
                           ],
                           default='corn')
    
    confidence = FloatField('G√ºven E≈üiƒüi (%)',
                           validators=[NumberRange(min=10, max=95)],
                           default=25)
    
    project_id = SelectField('Proje (Opsiyonel)',
                            choices=[],
                            validators=[Optional()],
                            coerce=int)
    
    submit = SubmitField('Hastalƒ±k Tespiti Ba≈ülat')

class TreeDetectionForm(FlaskForm):
    """
    Tree detection from drone imagery form
    """
    image = FileField('Drone/Hava G√∂r√ºnt√ºs√º',
                     validators=[FileRequired(),
                               FileAllowed(['jpg', 'jpeg', 'png', 'tif', 'tiff'], 
                                         'JPG, PNG veya TIFF dosyalarƒ±!')])
    
    confidence = FloatField('G√ºven E≈üiƒüi (%)',
                           validators=[NumberRange(min=10, max=95)],
                           default=25)
    
    iou_threshold = FloatField('IoU E≈üiƒüi',
                              validators=[NumberRange(min=0.3, max=0.9)],
                              default=0.7)
    
    project_id = SelectField('Proje (Opsiyonel)',
                            choices=[],
                            validators=[Optional()],
                            coerce=int)
    
    submit = SubmitField('Aƒüa√ß Tespiti Ba≈ülat')

class VegetationAnalysisForm(FlaskForm):
    """
    Vegetation analysis form with 15+ algorithms
    """
    image = FileField('GeoTIFF/Multispektral G√∂r√ºnt√º',
                     validators=[FileRequired(),
                               FileAllowed(['tif', 'tiff', 'jpg', 'jpeg', 'png'], 
                                         'GeoTIFF, JPG veya PNG dosyalarƒ±!')])
    
    algorithm = SelectField('Analiz Algoritmasƒ±',
                           choices=[
                               ('ndvi', 'NDVI - Normalized Difference Vegetation Index'),
                               ('gli', 'GLI - Green Leaf Index'),
                               ('vari', 'VARI - Visible Atmospherically Resistant Index'),
                               ('ndwi', 'NDWI - Normalized Difference Water Index'),
                               ('savi', 'SAVI - Soil Adjusted Vegetation Index'),
                               ('evi', 'EVI - Enhanced Vegetation Index'),
                               ('tgi', 'TGI - Triangular Greenness Index'),
                               ('msavi', 'MSAVI - Modified SAVI'),
                               ('osavi', 'OSAVI - Optimized SAVI'),
                               ('rdvi', 'RDVI - Renormalized Difference VI'),
                               ('gndvi', 'GNDVI - Green NDVI'),
                               ('cvi', 'CVI - Chlorophyll Vegetation Index'),
                               ('arvi', 'ARVI - Atmospherically Resistant VI'),
                               ('gci', 'GCI - Green Coverage Index')
                           ],
                           default='ndvi')
    
    colormap = SelectField('Renk Haritasƒ±',
                          choices=[
                              ('rdylgn', 'Kƒ±rmƒ±zƒ±-Sarƒ±-Ye≈üil'),
                              ('viridis', 'Viridis'),
                              ('plasma', 'Plasma'),
                              ('inferno', 'Inferno'),
                              ('magma', 'Magma'),
                              ('coolwarm', 'Soƒüuk-Sƒ±cak'),
                              ('spectral', 'Spektral')
                          ],
                          default='rdylgn')
    
    min_range = FloatField('Minimum Deƒüer',
                          validators=[Optional(), NumberRange(min=-1, max=1)],
                          default=-1)
    
    max_range = FloatField('Maksimum Deƒüer',
                          validators=[Optional(), NumberRange(min=-1, max=1)],
                          default=1)
    
    project_id = SelectField('Proje (Opsiyonel)',
                            choices=[],
                            validators=[Optional()],
                            coerce=int)
    
    submit = SubmitField('Vegetation Analizi Ba≈ülat')

class GeoTIFFUploadForm(FlaskForm):
    """
    GeoTIFF file upload and processing form
    """
    geotiff_file = FileField('GeoTIFF Dosyasƒ±',
                           validators=[FileRequired(),
                                     FileAllowed(['tif', 'tiff'], 'Sadece GeoTIFF dosyalarƒ±!')])
    
    process_type = SelectField('ƒ∞≈ülem T√ºr√º',
                              choices=[
                                  ('histogram', 'Histogram Analizi'),
                                  ('rgb_extract', 'RGB √áƒ±karma'),
                                  ('vegetation', 'Vegetation Analizi'),
                                  ('statistics', 'ƒ∞statistiksel Analiz')
                              ],
                              default='histogram')
    
    bins = IntegerField('Histogram Bin Sayƒ±sƒ±',
                       validators=[NumberRange(min=16, max=1024)],
                       default=256)
    
    submit = SubmitField('GeoTIFF ƒ∞≈üle')

def populate_project_choices(form, user_id):
    """
    Helper function to populate project choices for forms
    """
    from models import Project
    
    projects = Project.query.filter_by(user_id=user_id).all()
    choices = [('', 'Proje Se√ßin')]
    choices.extend([(p.id, p.title) for p in projects])
    
    # Update form choices
    if hasattr(form, 'project_id'):
        form.project_id.choices = choices
    
    return choices